@page "/"
@using System.Xml.Linq
@inject IJSRuntime JSRuntime
@inject SharedDataService SharedDataService

<h3>Fiszki</h3>
<!-- Sekcja: Wybór pliku XML -->
<InputFile OnChange="OnFileSelected" />

@if (!string.IsNullOrEmpty(fileName))
{
    SharedDataService.FileName = fileName;
}

@if (SharedDataService.Pairs.Count > 0)
{
    <h5 class="mt-3">Załadowany plik: @SharedDataService.FileName</h5>

    <h4>Rozpoznawanie mowy</h4>
    <p>Tekst: @recognizedText</p>
    <input @bind="listenLanguage" placeholder="Wpisz kod języka (np. en-US)" style="width:300px;" />

    <h4>Język fiszek</h4>
    <div class="mb-2">
        <input @bind="speakLanguage" placeholder="Wpisz kod języka (np. en-US)" style="width:300px;" />
    </div>

    <button class="btn btn-success" @onclick="() => StartRandomMode(listenLanguage)" disabled="@isRandomModeRunning">Start</button>
    <button class="btn btn-danger" @onclick="StopRandomMode" disabled="@(!isRandomModeRunning)">Zatrzymaj</button>
}

@code {
    private string recognizedText = "Oczekiwanie na tekst...";
    private string listenLanguage = "";
    private bool isRandomModeRunning = false;
    private CancellationTokenSource? randomModeCancellationTokenSource;
    private string speakLanguage = "";
    private string textToSpeak = "";
    private string? fileName;

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles(1).FirstOrDefault();
        if (file == null) return;

        fileName = file.Name;
        using var stream = file.OpenReadStream(maxAllowedSize: 10_000_000);
        using var reader = new StreamReader(stream);
        var xmlContent = await reader.ReadToEndAsync();

        SharedDataService.LoadPairsFromXml(xmlContent);
    }

    private async Task StartListening(string language)
    {
        var dotNetReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("speechRecognitionInterop.startListening", dotNetReference, language);
        StateHasChanged();
    }

    [JSInvokable]
    public void ProcessSpeech(string transcript)
    {
        recognizedText = transcript;
        StateHasChanged();
    }

    private async Task SpeakText(string language)
    {
        try
        {
            // Wywołanie JS z czekaniem na zakończenie odtwarzania
            await JSRuntime.InvokeVoidAsync("speechSynthesisInterop.speak", textToSpeak, language);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd podczas odtwarzania tekstu: {ex.Message}");
        }
    }

    private async Task StartRandomMode(string language)
    {
        if (SharedDataService.Pairs.Count == 0)
            return;

        isRandomModeRunning = true;
        StateHasChanged();
        randomModeCancellationTokenSource = new CancellationTokenSource();
        var token = randomModeCancellationTokenSource.Token;

        try
        {
            var rand = new Random();
            while (!token.IsCancellationRequested)
            {
                // Losujemy parę
                var randomIndex = rand.Next(SharedDataService.Pairs.Count);
                var randomPair = SharedDataService.Pairs[randomIndex];

                // Mówimy front
                textToSpeak = randomPair.FrontSide;
                await SpeakText(speakLanguage);

                // "Czekamy" - i w tym czasie user mówi
                await JSRuntime.InvokeVoidAsync("playSound", "./Assets/waiting-for-response.mp3");
                await Task.Delay(300, token); // krótka pauza przed nasłuchem
                await StartListening(language);
                await Task.Delay(5000, token);

                // Bezpieczny substring check
                if (recognizedText.Length > 1)
                {
                    var trimmed = recognizedText.Substring(0, recognizedText.Length - 1).ToLower();

                    if (trimmed == "stop")
                    {
                        throw new TaskCanceledException();
                    }
                    if (trimmed == randomPair.BackSide.ToLower())
                    {
                        await JSRuntime.InvokeVoidAsync("playSound", "./Assets/good-answer.mp3");
                    }
                    else
                    {
                        await JSRuntime.InvokeVoidAsync("playSound", "./Assets/wrong-answer.mp3");
                        await Task.Delay(500, token);
                        // Mówimy poprawną odpowiedź
                        textToSpeak = randomPair.BackSide;
                        await SpeakText(language);
                    }
                }

                await Task.Delay(2000, token);
            }
        }
        catch (TaskCanceledException)
        {
            // Przerwano pętlę
        }
        finally
        {
            await JSRuntime.InvokeVoidAsync("playSound", "./Assets/stop.mp3");
            isRandomModeRunning = false;
            StateHasChanged();
        }
    }

    private void StopRandomMode()
    {
        randomModeCancellationTokenSource?.Cancel();
        randomModeCancellationTokenSource = null;
        isRandomModeRunning = false;
        StateHasChanged();
    }
}
