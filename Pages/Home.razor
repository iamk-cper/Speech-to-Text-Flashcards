@page "/"
@using System.Xml.Linq
@inject IJSRuntime JSRuntime

<h3>Wczytywanie i zapisywanie pliku XML (lokalnie przez u¿ytkownika)</h3>

<!-- Sekcja: Wybór pliku XML -->
<InputFile OnChange="OnFileSelected" />

@if (!string.IsNullOrEmpty(fileName))
{
    <p>Wczytany plik: @fileName</p>
}

<!-- Sekcja: Lista par wczytanych z pliku -->
@if (pairs.Count > 0)
{
    <h5 class="mt-4">Lista za³adowanych par:</h5>
    <ul>
        @foreach (var pair in pairs)
        {
            <li>
                <button class="btn btn-sm btn-danger ms-2" @onclick="() => RemovePair(pair)">X</button>
                @pair.FrontSide - @pair.BackSide
            </li>
        }
    </ul>
}

<!-- Sekcja: Dodawanie nowej pary -->
<div class="mt-3">
    <input @bind="newFront" placeholder="Wpisz front-side..." />
    <input @bind="newBack" placeholder="Wpisz back-side..." />
    <button class="btn btn-info" @onclick="AddPair">Dodaj parê</button>
</div>

<!-- Sekcja: Zapisywanie do pliku -->
@if (pairs.Count > 0)
{
    <button class="btn btn-success mt-3" @onclick="SaveToXml">Pobierz zmodyfikowany plik XML</button>
}

@code {
    // Prosty model do przechowywania danych z pliku
    public class FlashcardPair
    {
        public string FrontSide { get; set; } = "";
        public string BackSide { get; set; } = "";
    }

    private List<FlashcardPair> pairs = new();
    private string newFront = "";
    private string newBack = "";

    // Nazwa wczytanego pliku (opcjonalnie do wyœwietlenia)
    private string? fileName;

    // 1. Obs³uga wyboru pliku przez u¿ytkownika
    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        // Bierzemy pierwszy wybrany plik (jeœli user wybra³ kilka, bierzemy tylko jeden).
        var file = e.GetMultipleFiles(1).FirstOrDefault();
        if (file == null) 
            return;

        fileName = file.Name;

        // Wczytujemy zawartoœæ jako strumieñ
        using var stream = file.OpenReadStream(maxAllowedSize: 10_000_000); 
        using var reader = new StreamReader(stream);
        var xmlContent = await reader.ReadToEndAsync();

        // Parsujemy XML i wype³niamy listê pairs
        LoadPairsFromXml(xmlContent);
    }

    // 2. Parsowanie zawartoœci pliku XML w pamiêci
    private void LoadPairsFromXml(string xml)
    {
        pairs.Clear();

        try
        {
            var xdoc = XDocument.Parse(xml);
            foreach (var el in xdoc.Descendants("pair"))
            {
                var front = el.Element("front")?.Value;
                var back = el.Element("back")?.Value;

                if (!string.IsNullOrEmpty(front) && !string.IsNullOrEmpty(back))
                {
                    pairs.Add(new FlashcardPair
                    {
                        FrontSide = front,
                        BackSide = back
                    });
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("B³¹d parsowania XML: " + ex.Message);
        }
        StateHasChanged();
    }

    // 3. Dodanie nowej pary do listy
    private void AddPair()
    {
        if (!string.IsNullOrWhiteSpace(newFront) && !string.IsNullOrWhiteSpace(newBack))
        {
            pairs.Add(new FlashcardPair
            {
                FrontSide = newFront,
                BackSide = newBack
            });

            newFront = "";
            newBack = "";
        }
    }

    // 4. Generowanie nowego pliku XML i pobranie go przez przegl¹darkê
    private async Task SaveToXml()
    {
        // Tworzymy dokument XML w pamiêci
        var xdoc = new XDocument(
            new XElement("pairs",
                from p in pairs
                select new XElement("pair",
                    new XElement("front", p.FrontSide),
                    new XElement("back", p.BackSide)
                )
            )
        );

        // Konwertujemy do stringa
        var xmlString = xdoc.ToString();

        // Wywo³ujemy metodê JS, która pozwoli u¿ytkownikowi pobraæ plik
        // (Zrobimy to przez Blazor JS Interop)
        await JSRuntime.InvokeVoidAsync("saveFileWithPicker", xmlString);
    }

    private void RemovePair(FlashcardPair pair)
    {
        pairs.Remove(pair);
        StateHasChanged();
    }

}
