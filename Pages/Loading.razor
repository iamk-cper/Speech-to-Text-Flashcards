@page "/xml-loading"
@using System.Xml.Linq
@inject IJSRuntime JSRuntime
@inject SharedDataService SharedDataService

<h2 class="center mb-3">Wczytywanie i zapisywanie pliku XML</h2>

<Popup Message="@popupMessage" OnClose="HidePopup" />

<!-- Sekcja: Wybór pliku XML -->
<InputFile OnChange="OnFileSelected" />

@if (!string.IsNullOrEmpty(fileName))
{
    SharedDataService.FileName = fileName;
}

@if (SharedDataService.Pairs.Count > 0)
{
    <h6 class="mt-3">Za³adowany plik: @SharedDataService.FileName</h6>
    <h4 class="mt-4 bm-2 center">Lista za³adowanych par:</h4>
    <div class="center" style="display: flex; flex-direction: column; align-items: center;">
        @foreach (var pair in SharedDataService.Pairs)
        {
            <div class="mt-1" style="width: 60%; text-align: left; display: flex; align-items: center; gap: 0.5rem;">
                <button class="btn btn-sm btn-danger ms-2" @onclick="() => RemovePair(pair)">X</button>
                <span>@pair.FrontSide - @pair.BackSide (<strong>Priority:</strong> @($"{pair.Priority:F2}"))</span>
            </div>
        }
    </div>
}

<!-- Sekcja: Dodawanie nowej pary -->
<div class="mt-2 mb-4 center">
    <input @bind="newFront" placeholder="Wpisz front-side..." />
    <input @bind="newBack" placeholder="Wpisz back-side..." />
    <button class="btn btn-info" @onclick="AddPair">Dodaj parê</button>
</div>


@if (SharedDataService.Pairs.Count > 0)
{
    <div class="mt-4 center">
        <button class="btn btn-warning" @onclick="ResetPriorities">
            Zresetuj priorytety
        </button>

        <button class="btn btn-success" @onclick="SaveToXml">
            Pobierz zmodyfikowany plik XML
        </button>
    </div>
}

@code {
    private string newFront = "";
    private string newBack = "";
    private string? fileName;
    private string? popupMessage;

    protected override void OnInitialized()
    {
        SharedDataService.PairAdded += OnPairAdded;
        SharedDataService.PairRemoved += OnPairRemoved;
        SharedDataService.PriorityReset += OnPriorityReset;
    }

    private void OnPairAdded(SharedDataService.FlashcardPair pair)
    {
        ShowPopup($"Dodano fiszkê: {pair.FrontSide} - {pair.BackSide}");
        StateHasChanged(); // Odœwie¿enie widoku
    }

    private void OnPairRemoved(SharedDataService.FlashcardPair pair)
    {
        ShowPopup($"Usuniêto fiszkê: {pair.FrontSide} - {pair.BackSide}");
        StateHasChanged(); // Odœwie¿enie widoku
    }

    private void OnPriorityReset()
    {
        ShowPopup("Priorytety zosta³y zresetowane.");
        StateHasChanged(); // Odœwie¿enie widoku
    }

    private void ShowPopup(string message)
    {
        popupMessage = message; // Ustaw treœæ popupa
        StateHasChanged(); // Odœwie¿ widok
    }

    private void HidePopup()
    {
        popupMessage = null; // Ukryj popup
        StateHasChanged(); // Odœwie¿ widok
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles(1).FirstOrDefault();
        if (file == null) return;

        fileName = file.Name;
        using var stream = file.OpenReadStream(maxAllowedSize: 10_000_000);
        using var reader = new StreamReader(stream);
        var xmlContent = await reader.ReadToEndAsync();

        SharedDataService.LoadPairsFromXml(xmlContent);
    }

    private void AddPair()
    {
        if (!string.IsNullOrWhiteSpace(newFront) && !string.IsNullOrWhiteSpace(newBack))
        {
            SharedDataService.AddPair(new SharedDataService.FlashcardPair
                {
                    FrontSide = newFront,
                    BackSide = newBack,
                    Priority = 1
                });

            newFront = "";
            newBack = "";
        }
    }

    private void RemovePair(SharedDataService.FlashcardPair pair)
    {
        SharedDataService.RemovePair(pair);
    }

    private void ResetPriorities()
    {
        SharedDataService.ResetAllPriorities();
    }


    private async Task SaveToXml()
    {
        var xmlString = SharedDataService.GetXmlFromPairs();
        await JSRuntime.InvokeVoidAsync("saveFileWithPicker", xmlString, "application/xml");
    }

}
